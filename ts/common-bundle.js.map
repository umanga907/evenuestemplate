{"version":3,"sources":["webpack://evenues/./Client/Common/FormManager.ts","webpack://evenues/./Client/Common/GridManager.ts","webpack://evenues/./Client/Common/HttpManager.ts","webpack://evenues/./Client/Common/ProgressBar.ts","webpack://evenues/./Client/Common/UiHelper.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAA4C;AAC5C,2BAA2B;AAC3B,MAAM,YAAa,SAAQ,QAAQ;CAIlC;AACM,MAAM,WAAW;IAmBpB,YAAY,MAAc,EAAE,aAAqB,UAAU,EAAE,eAAuB,YAAY;QAdxF,wCAAmC,GAAW,mBAAmB,CAAC,sCAAqC;QACvG,yCAAoC,GAAW,oBAAoB,CAAC,uFAAsF;QAClK,oFAAoF;QAC5E,qCAAgC,GAAW,gBAAgB,CAAC,kDAAiD;QAC7G,qCAAgC,GAAW,gBAAgB,CAAC,2DAA0D;QACtH,sCAAiC,GAAW,gBAAgB,CAAC,wDAAuD;QACpH,uCAAkC,GAAW,oBAAoB,CAAC,IAAG;QACrE,uCAAkC,GAAW,oBAAoB,CAAC,OAAM;QACxE,uCAAkC,GAAW,kBAAkB,CAAC,+CAA8C;QAE9G,mCAA8B,GAAW,sBAAsB,CAAC;QAChE,gCAA2B,GAAW,4BAA4B,CAAC;QACnE,4BAAuB,GAAW,oBAAoB,CAAC;QAG/D,IAAI,CAAC,KAAK,GAAG,QAAQ,CAAC,cAAc,CAAC,MAAM,CAAoB,CAAC;QAC5D,IAAI,IAAI,CAAC,KAAK,KAAK,IAAI,EAAE;YAAE,MAAM,KAAK,CAAC,gBAAgB,MAAM,eAAe,CAAC,CAAC;SAAC;QAC/E,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC;QAC9B,IAAI,CAAC,aAAa,GAAG,YAAY,CAAC;QAClC,IAAI,CAAC,yBAAyB,EAAE,CAAC;IACrC,CAAC;IAEY,yBAAyB;;YAClC,IAAI,iBAAiB,GAAG,QAAQ,CAAC,sBAAsB,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,CAAqB;YAClG,IAAI,iBAAiB,KAAK,SAAS,EAAE;gBACjC,iBAAiB,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;gBACvD,iBAAiB,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;aACrD;YACD,IAAI,mBAAmB,GAAG,QAAQ,CAAC,cAAc,CAAC,IAAI,CAAC,uBAAuB,CAAmB,CAAC;YAClG,IAAI,mBAAmB,KAAK,IAAI,EAAE;gBAC9B,mBAAmB,CAAC,SAAS,GAAG,EAAE,CAAC;gBACnC,mBAAmB,CAAC,KAAK,CAAC,OAAO,GAAG,MAAM,CAAC;aAC9C;QACL,CAAC;KAAA;IAEY,YAAY;;YACrB,MAAM,IAAI,CAAC,yBAAyB,EAAE,CAAC;YACvC,IAAI,SAAS,GAAY,IAAI,CAAC;YAC9B,wCAAwC;YACxC,IAAI,QAAQ,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;YAE/C,KAAK,IAAI,OAAO,IAAI,QAAQ,EAAE;gBAC1B,IAAI,KAAK,GAAG,OAA2B,CAAC;gBACxC,IAAI,KAAK,CAAC,IAAI,KAAK,QAAQ,EAAE;oBACzB,SAAS;iBACZ;gBACD,IAAI,kBAAkB,GAAG,KAAK,CAAC,EAAE,CAAC;gBAClC,IAAI,aAAa,GAAG,KAAK,CAAC,UAAU,CAAC,YAAY,CAAC,IAAI,CAAC,8BAA8B,CAAC,CAAC;gBACvF,IAAI,aAAa,KAAK,IAAI,EAAE;oBACxB,kBAAkB,GAAG,aAAa,CAAC,KAAK;iBAC3C;gBACD,MAAM,IAAI,CAAC,wBAAwB,CAAC,KAAK,CAAC,CAAC;gBAC3C,IAAI,CAAC,SAAS,EAAE;oBACZ,SAAS;iBACZ;gBACD,MAAM,IAAI,CAAC,yBAAyB,CAAC,KAAK,EAAE,kBAAkB,CAAC,CAAC;gBAChE,IAAI,CAAC,SAAS,EAAE;oBACZ,SAAS;iBACZ;gBACD,QAAQ,KAAK,CAAC,IAAI,EAAE;oBAChB,KAAK,OAAO;wBACR,SAAS,GAAG,MAAM,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAC;wBACjD,MAAM;oBACV,KAAK,KAAK;wBACN,SAAS,GAAG,MAAM,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAC;wBACjD,MAAM;oBACV,KAAK,QAAQ;wBACT,SAAS,GAAG,MAAM,IAAI,CAAC,mBAAmB,CAAC,KAAK,CAAC,CAAC;wBAClD,MAAM;iBACb;gBACD,IAAI,CAAC,SAAS,EAAE;oBACZ,SAAS;iBACZ;aACJ;YACD,OAAO,SAAS,CAAC;QACrB,CAAC;KAAA;IAEY,UAAU,CAAC,MAAY,EAAE,EAAE,SAAe,MAAM,EAAE,mBAA2B,EAAE;;YACxF,IAAI,GAAG,IAAE,SAAS,IAAI,GAAG,KAAK,EAAE,EAAE;gBAC9B,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC,KAAK,CAAC;aAC5D;YAED,IAAI,OAAO,GAAgB,EAAE,CAAC;YAC9B,IAAI,gBAAgB,KAAK,EAAE,EAAE;gBACzB,OAAO,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,2BAA2B,EAAE,gBAAgB,CAAC,CAAC,CAAC;aACtE;YACD,IAAI,QAAQ,GAAG,IAAI,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YACxC,IAAI,OAAO,GAAgB,EAAE,MAAM,EAAE,MAAM,EAAE,IAAI,EAAE,QAAQ,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC;YAChF,IAAI,WAAW,GAAG,IAAI,qDAAW,EAAE,CAAC;YACpC,WAAW,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;YAC9B,IAAI;gBACA,MAAM,QAAQ,GAAiB,MAAM,KAAK,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;gBACzD,WAAW,CAAC,IAAI,EAAE,CAAC;gBACnB,QAAQ,CAAC,IAAI,GAAG,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC;gBACtC,OAAO,QAAQ,CAAC;aACnB;YAAC,OAAO,EAAE,EAAE;gBACT,WAAW,CAAC,IAAI,EAAE,CAAC;gBACnB,MAAM,KAAK,CAAC,gEAAgE,EAAE,EAAE,CAAC;aACpF;QACL,CAAC;KAAA;IAEM,YAAY,CAAC,QAAsB;QACtC,IAAI,CAAC,QAAQ,CAAC,EAAE,EAAE;YACd,MAAM,KAAK,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;SACpC;QACD,OAAO,QAAQ,CAAC;IACpB,CAAC;IAEY,yBAAyB,CAAC,QAAsB,EAAE,gBAAwB,6BAA6B,EAAE,eAAuB,mDAAmD;;YAC5L,IAAI,QAAQ,GAAG,QAAQ,CAAC,cAAc,CAAC,IAAI,CAAC,uBAAuB,CAAmB,CAAC;YACvF,IAAI,QAAQ,KAAK,IAAI,EAAE;gBACnB,IAAI,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC;gBACpC,IAAI,cAAc,GAAY,KAAK,CAAC;gBACpC,KAAK,IAAI,OAAO,IAAI,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE;oBACvC,IAAI,OAAO,CAAC,EAAE,KAAK,IAAI,CAAC,uBAAuB,EAAE;wBAC7C,cAAc,GAAG,IAAI,CAAC;wBACtB,MAAM;qBACT;iBACJ;gBACD,IAAI,CAAC,cAAc,EAAE;oBACjB,IAAI,OAAO,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;oBAC5C,OAAO,CAAC,EAAE,GAAG,IAAI,CAAC,uBAAuB,CAAC;oBAC1C,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;oBACxD,QAAQ,GAAG,QAAQ,CAAC,cAAc,CAAC,IAAI,CAAC,uBAAuB,CAAmB,CAAC;iBACtF;aACJ;YACD,IAAI,OAAO,GAAG,EAAE,CAAC;YACjB,IAAI,UAAU,GAAG,eAAe,CAAC;YACjC,IAAI,QAAQ,KAAK,IAAI,EAAE;gBACnB,QAAQ,CAAC,KAAK,CAAC,OAAO,GAAG,SAAS,CAAC;gBACnC,IAAI,QAAQ,CAAC,EAAE,EAAE;oBACb,OAAO,GAAG,aAAa,CAAC;oBACxB,UAAU,GAAG,eAAe,CAAC;iBAChC;qBAAM;oBACH,IAAI,IAAI,GAAG,MAAM,QAAQ,CAAC,IAAI,CAAC;oBAC/B,IAAI,QAAQ,CAAC,MAAM,IAAI,GAAG,EAAE;wBACxB,OAAO,GAAG,GAAG,YAAY,UAAU,QAAQ,CAAC,MAAM,KAAK,IAAI,EAAE,CAAC;wBAC9D,UAAU,GAAG,cAAc,CAAC;qBAC/B;yBAAM,EAAC,8BAA8B;wBAClC,mEAAmE;wBACnE,IAAI;4BACA,IAAI,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;4BAC9B,IAAI,MAAM,KAAK,SAAS,EAAE;gCACtB,OAAO,IAAI,MAAM,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;6BAClD;iCAAM;gCACH,KAAK,IAAI,GAAG,IAAI,MAAM,EAAE;oCACpB,IAAI,MAAM,CAAC,cAAc,CAAC,GAAG,CAAC,EAAE;wCAC5B,OAAO,IAAI,MAAM,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC;qCACtD;iCACJ;6BACJ;yBACJ;wBAAC,OAAO,EAAE,EAAE;4BACT,OAAO,IAAI,MAAM,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;yBAClD;wBACD,IAAI,OAAO,CAAC,MAAM,GAAG,CAAC,EAAE;4BACpB,OAAO,GAAG,uDAAuD,OAAO,OAAO,CAAC;yBACnF;6BAAM;4BACH,OAAO,GAAG,gDAAgD,CAAC;yBAC9D;wBAED,UAAU,GAAG,eAAe,CAAC;qBAChC;iBACJ;gBACD,QAAQ,CAAC,KAAK,CAAC,OAAO,GAAG,OAAO,CAAC;aACpC;iBAAM;gBACH,IAAI,QAAQ,CAAC,EAAE,EAAE;oBACb,KAAK,CAAC,mBAAmB,CAAC,CAAC;iBAC9B;qBAAM;oBACH,KAAK,CAAC,qBAAqB,QAAQ,CAAC,MAAM,KAAK,QAAQ,CAAC,UAAU,EAAE,CAAC,CAAC;iBACzE;gBACD,OAAO;aACV;YACD,IAAI,QAAQ,GAAG,qBAAqB,UAAU;gBACtC,OAAO;;mBAEJ,CAAC;YACZ,QAAQ,CAAC,SAAS,GAAG,QAAQ,CAAC;QAClC,CAAC;KAAA;IAEa,eAAe,CAAC,KAAU;;YACpC,IAAI,OAAO,GAAW,EAAE,CAAC;YACzB,IAAI,YAAY,GAAG,KAAK,CAAC,OAAO,CAAC;YACjC,IAAI,YAAY,KAAK,SAAS,EAAE;gBAC5B,YAAY,GAAG,KAAK,CAAC,OAAO,CAAC;aAChC;YACD,IAAI,SAAS,GAAG,KAAK,CAAC,IAAI,CAAC;YAC3B,IAAI,SAAS,KAAK,SAAS,EAAE;gBACzB,SAAS,GAAG,KAAK,CAAC,IAAI,CAAC;aAC1B;YACD,IAAI,SAAS,KAAK,EAAE,EAAE;gBAClB,OAAO,IAAI,OAAO,YAAY,OAAO,CAAC;aACzC;iBAAM;gBACH,IAAI,UAAU,GAAG,MAAM,IAAI,CAAC,wBAAwB,CAAC,SAAS,EAAE,YAAY,EAAE,KAAK,CAAC,CAAC;gBACrF,IAAI,UAAU,KAAK,KAAK,EAAE;oBACtB,OAAO,IAAI,OAAO,YAAY,OAAO,CAAC;iBACzC;aACJ;YACD,OAAO,OAAO,CAAC;QACnB,CAAC;KAAA;IACa,wBAAwB,CAAC,SAAiB,EAAE,OAAe,EAAE,KAAc;;YACrF,IAAI,KAAK,GAAG,QAAQ,CAAC,cAAc,CAAC,SAAS,CAAqB,CAAC;YACnE,IAAI,KAAK,KAAK,IAAI,EAAE;gBAChB,IAAI,MAAM,GAAG,QAAQ,CAAC,iBAAiB,CAAC,SAAS,CAAC,CAAC;gBACnD,IAAI,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE;oBACnB,KAAK,GAAG,MAAM,CAAC,CAAC,CAAqB,CAAC;iBACzC;aACJ;YACD,IAAI,KAAK,KAAK,IAAI,EAAE;gBAAE,OAAO,KAAK,CAAC;aAAC;YACpC,IAAI,KAAK,KAAK,IAAI,EAAE;gBAChB,IAAI,KAAK,EAAE;oBACP,KAAK,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;oBAC3C,KAAK,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;iBACzC;qBAAM;oBACH,KAAK,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;oBACzC,KAAK,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;iBAC3C;gBACD,IAAI,SAAS,GAAG,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;gBACzD,IAAI,oBAAoB,GAAY,KAAK,CAAC;gBAC1C,KAAK,IAAI,QAAQ,IAAI,SAAS,EAAE;oBAC5B,IAAI,QAAQ,CAAC,SAAS,CAAC,QAAQ,CAAC,kBAAkB,CAAC,EAAE;wBACjD,IAAI,QAAQ,GAAG,QAA2B,CAAC;wBAC3C,QAAQ,CAAC,SAAS,GAAG,OAAO,CAAC;wBAC7B,QAAQ,CAAC,KAAK,CAAC,OAAO,GAAG,OAAO,CAAC;wBACjC,oBAAoB,GAAG,IAAI,CAAC;wBAC5B,MAAM;qBACT;iBACJ;gBACD,IAAI,CAAC,oBAAoB,EAAE;oBACvB,IAAI,QAAQ,GAAG,QAAQ,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;oBAC9C,QAAQ,CAAC,SAAS,CAAC,GAAG,CAAC,kBAAkB,CAAC,CAAC;oBAC3C,QAAQ,CAAC,SAAS,GAAG,OAAO,CAAC;oBAC7B,QAAQ,CAAC,KAAK,CAAC,OAAO,GAAG,OAAO,CAAC;oBACjC,KAAK,CAAC,aAAa,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;iBAC7C;gBACD,OAAO,IAAI,CAAC;aACf;QACL,CAAC;KAAA;IAED,2DAA2D;IAC3D,qDAAqD;IACrD,qCAAqC;IACrC,kDAAkD;IAClD,wCAAwC;IACxC,uBAAuB;IACvB,WAAW;IACX,mEAAmE;IACnE,2CAA2C;IAC3C,oEAAoE;IACpE,+DAA+D;IAC/D,iCAAiC;IACjC,wBAAwB;IACxB,eAAe;IACf,WAAW;IACX,OAAO;IAEP,GAAG;IACW,wBAAwB,CAAC,KAAuB;;YAC1D,IAAI,iBAAiB,GAAG,KAAK,CAAC,UAAU,CAAC,YAAY,CAAC,IAAI,CAAC,mCAAmC,CAAC,CAAC;YAChG,IAAI,iBAAiB,KAAK,IAAI,EAAE;gBAC5B,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,EAAE,KAAK,EAAE,EAAE;oBAC3B,MAAM,IAAI,CAAC,wBAAwB,CAAC,KAAK,CAAC,EAAE,EAAE,iBAAiB,CAAC,KAAK,EAAE,KAAK,CAAC;oBAC7E,OAAO,KAAK,CAAC;iBAChB;qBAAM;oBACH,MAAM,IAAI,CAAC,wBAAwB,CAAC,KAAK,CAAC,EAAE,EAAE,EAAE,EAAE,IAAI,CAAC;iBAC1D;aACJ;iBAAM;gBACH,MAAM,IAAI,CAAC,wBAAwB,CAAC,KAAK,CAAC,EAAE,EAAE,EAAE,EAAE,IAAI,CAAC;aAC1D;YACD,OAAO,IAAI,CAAC;QAChB,CAAC;KAAA;IAEa,yBAAyB,CAAC,KAAuB,EAAE,kBAA0B;;YACvF,IAAI,kBAAkB,GAAG,KAAK,CAAC,UAAU,CAAC,YAAY,CAAC,WAAW,CAAC,CAAC;YACpE,IAAI,kBAAkB,KAAK,IAAI,EAAE;gBAC7B,IAAI,KAAK,CAAC,KAAK,CAAC,MAAM,GAAG,MAAM,CAAC,kBAAkB,CAAC,KAAK,CAAC,EAAE;oBACvD,IAAI,mCAAmC,GAAG,KAAK,CAAC,UAAU,CAAC,YAAY,CAAC,IAAI,CAAC,oCAAoC,CAAC,CAAC;oBACnH,IAAI,iBAAiB,GAAG,aAAa,kBAAkB,6DAA6D,kBAAkB,CAAC,KAAK,IAAI,CAAC;oBACjJ,IAAI,mCAAmC,IAAI,IAAI,EAAE;wBAC7C,iBAAiB,GAAG,mCAAmC,CAAC,KAAK,CAAC;qBACjE;oBACD,MAAM,IAAI,CAAC,wBAAwB,CAAC,KAAK,CAAC,EAAE,EAAE,iBAAiB,EAAE,KAAK,CAAC;oBACvE,OAAO,KAAK,CAAC;iBAChB;qBAAM;oBACH,MAAM,IAAI,CAAC,wBAAwB,CAAC,KAAK,CAAC,EAAE,EAAE,EAAE,EAAE,IAAI,CAAC;iBAC1D;aACJ;YACD,OAAO,IAAI,CAAC;QAChB,CAAC;KAAA;IAEa,kBAAkB,CAAC,KAAuB;;YACpD,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,EAAE,KAAK,EAAE,EAAE;gBAC3B,IAAI,cAAc,GAAG,KAAK,CAAC,UAAU,CAAC,YAAY,CAAC,IAAI,CAAC,gCAAgC,CAAC,CAAC;gBAC1F,IAAI,cAAc,KAAK,IAAI,EAAE;oBACzB,IAAI,UAAU,GAAG,MAAM,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;oBACvD,IAAI,CAAC,UAAU,EAAE;wBACb,MAAM,IAAI,CAAC,wBAAwB,CAAC,KAAK,CAAC,EAAE,EAAE,cAAc,CAAC,KAAK,EAAE,KAAK,CAAC;wBAC1E,OAAO,KAAK,CAAC;qBAChB;yBAAM;wBACH,MAAM,IAAI,CAAC,wBAAwB,CAAC,KAAK,CAAC,EAAE,EAAE,EAAE,EAAE,IAAI,CAAC;qBAC1D;iBACJ;aACJ;YACD,OAAO,IAAI,CAAC;QAChB,CAAC;KAAA;IAGa,aAAa,CAAC,IAAY;;YACpC,IAAI,+CAA+C,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;gBAC5D,OAAO,IAAI,CAAC;aACf;YACD,OAAO,KAAK,CAAC;QACjB,CAAC;KAAA;IAEa,kBAAkB,CAAC,KAAuB;;YACpD,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,EAAE,KAAK,EAAE,EAAE;gBAC3B,IAAI,cAAc,GAAG,KAAK,CAAC,UAAU,CAAC,YAAY,CAAC,IAAI,CAAC,gCAAgC,CAAC,CAAC;gBAC1F,IAAI,cAAc,KAAK,IAAI,EAAE;oBACzB,IAAI,UAAU,GAAG,MAAM,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;oBACvD,IAAI,CAAC,UAAU,EAAE;wBACb,MAAM,IAAI,CAAC,wBAAwB,CAAC,KAAK,CAAC,EAAE,EAAE,cAAc,CAAC,KAAK,EAAE,KAAK,CAAC;wBAC1E,OAAO,KAAK,CAAC;qBAChB;yBAAM;wBACH,MAAM,IAAI,CAAC,wBAAwB,CAAC,KAAK,CAAC,EAAE,EAAE,EAAE,EAAE,IAAI,CAAC;qBAC1D;iBACJ;aACJ;YACD,OAAO,IAAI,CAAC;QAChB,CAAC;KAAA;IAEa,aAAa,CAAC,KAAa;;YACrC,YAAY;YACZ,IAAI,MAAM,GAAG,UAAU,CAAC;YACxB,IAAI,KAAK,CAAC,IAAI,EAAE,CAAC,KAAK,CAAC,MAAM,CAAC,EAAE;gBAC5B,OAAO,IAAI,CAAC;aACf;iBAAM;gBACH,8CAA8C;gBAC9C,MAAM,GAAG,oDAAoD,CAAC;gBAC9D,IAAI,KAAK,CAAC,IAAI,EAAE,CAAC,KAAK,CAAC,MAAM,CAAC,EAAE;oBAC5B,OAAO,IAAI,CAAC;iBACf;qBAAM;oBACH,kDAAkD;oBAClD,MAAM,GAAG,oDAAoD,CAAC;oBAC9D,IAAI,KAAK,CAAC,IAAI,EAAE,CAAC,KAAK,CAAC,MAAM,CAAC,EAAE;wBAC5B,OAAO,IAAI,CAAC;qBACf;iBACJ;aACJ;YACD,OAAO,KAAK;QAChB,CAAC;KAAA;IAEa,eAAe,CAAC,KAAa,EAAE,QAAgB,EAAE,QAAgB;;YAC3E,IAAI,MAAM,GAAG,MAAM,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,CAAC;YAClC,IAAI,MAAM,KAAK,IAAI,EAAE;gBACjB,IAAI,MAAM,IAAI,QAAQ,IAAI,MAAM,IAAI,QAAQ,EAAE;oBAC1C,OAAO,IAAI;iBACd;aACJ;YACD,OAAO,KAAK;QAChB,CAAC;KAAA;IAEa,mBAAmB,CAAC,KAAuB;;YACrD,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,EAAE,KAAK,EAAE,EAAE;gBAE3B,IAAI,eAAe,GAAG,KAAK,CAAC,UAAU,CAAC,YAAY,CAAC,IAAI,CAAC,iCAAiC,CAAC,CAAC;gBAC5F,IAAI,eAAe,KAAK,IAAI,EAAE;oBAC1B,IAAI,uBAAuB,GAAG,KAAK,CAAC,UAAU,CAAC,YAAY,CAAC,IAAI,CAAC,kCAAkC,CAAC,CAAC;oBACrG,IAAI,QAAQ,GAAG,MAAM,CAAC,SAAS,CAAC;oBAChC,IAAI,uBAAuB,KAAK,IAAI,EAAE;wBAClC,QAAQ,GAAG,MAAM,CAAC,uBAAuB,CAAC,KAAK,CAAC,CAAC;qBACpD;oBACD,IAAI,uBAAuB,GAAG,KAAK,CAAC,UAAU,CAAC,YAAY,CAAC,IAAI,CAAC,kCAAkC,CAAC,CAAC;oBACrG,IAAI,QAAQ,GAAG,MAAM,CAAC,SAAS,CAAC;oBAChC,IAAI,uBAAuB,KAAK,IAAI,EAAE;wBAClC,QAAQ,GAAG,MAAM,CAAC,uBAAuB,CAAC,KAAK,CAAC,CAAC;qBACpD;oBACD,IAAI,WAAW,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,KAAK,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC;oBAC9E,IAAI,CAAC,WAAW,EAAE;wBACd,MAAM,IAAI,CAAC,wBAAwB,CAAC,KAAK,CAAC,EAAE,EAAE,eAAe,CAAC,KAAK,EAAE,KAAK,CAAC;wBAC3E,OAAO,KAAK,CAAC;qBAChB;yBAAM;wBACH,MAAM,IAAI,CAAC,wBAAwB,CAAC,KAAK,CAAC,EAAE,EAAE,EAAE,EAAE,IAAI,CAAC;qBAC1D;iBACJ;gBACD,IAAI,gBAAgB,GAAG,KAAK,CAAC,UAAU,CAAC,YAAY,CAAC,IAAI,CAAC,kCAAkC,CAAC,CAAC;gBAC9F,IAAI,gBAAgB,KAAK,IAAI,EAAE;oBAC3B,IAAI,uBAAuB,GAAG,KAAK,CAAC,UAAU,CAAC,YAAY,CAAC,IAAI,CAAC,kCAAkC,CAAC,CAAC;oBACrG,IAAI,QAAQ,GAAG,MAAM,CAAC,SAAS,CAAC;oBAChC,IAAI,uBAAuB,KAAK,IAAI,EAAE;wBAClC,QAAQ,GAAG,MAAM,CAAC,uBAAuB,CAAC,KAAK,CAAC,CAAC;qBACpD;oBACD,IAAI,uBAAuB,GAAG,KAAK,CAAC,UAAU,CAAC,YAAY,CAAC,IAAI,CAAC,kCAAkC,CAAC,CAAC;oBACrG,IAAI,QAAQ,GAAG,MAAM,CAAC,SAAS,CAAC;oBAChC,IAAI,uBAAuB,KAAK,IAAI,EAAE;wBAClC,QAAQ,GAAG,MAAM,CAAC,uBAAuB,CAAC,KAAK,CAAC,CAAC;qBACpD;oBACD,IAAI,YAAY,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,KAAK,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC;oBAC/E,IAAI,CAAC,YAAY,EAAE;wBACf,MAAM,IAAI,CAAC,wBAAwB,CAAC,KAAK,CAAC,EAAE,EAAE,gBAAgB,CAAC,KAAK,EAAE,KAAK,CAAC;wBAC5E,OAAO,KAAK,CAAC;qBAChB;yBAAM;wBACH,MAAM,IAAI,CAAC,wBAAwB,CAAC,KAAK,CAAC,EAAE,EAAE,EAAE,EAAE,IAAI,CAAC;qBAC1D;iBACJ;aAEJ;YACD,OAAO,IAAI,CAAC;QAChB,CAAC;KAAA;IAEa,eAAe,CAAC,KAAa,EAAE,QAAgB,EAAE,QAAgB;;YAC3E,IAAI,MAAM,GAAG,UAAU,CAAC;YACxB,IAAI,KAAK,CAAC,IAAI,EAAE,CAAC,KAAK,CAAC,MAAM,CAAC,EAAE;gBAC5B,IAAI,MAAM,GAAG,MAAM,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,CAAC;gBAClC,IAAI,MAAM,IAAI,QAAQ,IAAI,MAAM,IAAI,QAAQ,EAAE;oBAC1C,OAAO,IAAI;iBACd;gBACD,OAAO,KAAK,CAAC;aAChB;YACD,OAAO,KAAK;QAChB,CAAC;KAAA;IAEa,kBAAkB,CAAC,KAAa;;YAC1C,IAAI,MAAM,GAAG,aAAa,CAAC;YAC3B,IAAI,KAAK,CAAC,IAAI,EAAE,CAAC,KAAK,CAAC,MAAM,CAAC,EAAE;gBAC5B,OAAO,IAAI,CAAC;aACf;YACD,OAAO,KAAK;QAChB,CAAC;KAAA;CACJ;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvb6B;AAEvB,MAAM,WAAW;IAGd,IAAI,CAAC,OAAoB;;YAC3B,MAAM,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC;QACrC,CAAC;KAAA;IAEK,YAAY,CAAC,OAAoB;;YAEnC,IAAI,CAAC,QAAQ,GAAG,IAAI,wCAAI,CAAC;gBACrB,SAAS,EAAC,IAAI;gBACd,KAAK,EAAE,MAAM;gBACb,oBAAoB;gBACpB,WAAW,EAAE,IAAI;gBACjB,SAAS,EAAE,IAAI;gBACf,OAAO,EAAE,OAAO,CAAC,OAAO;gBACxB,UAAU,EAAE;oBACR,OAAO,EAAE,OAAO,CAAC,eAAe;oBAChC,KAAK,EAAE,OAAO,CAAC,UAAU;oBACzB,MAAM,EAAE;wBACJ,GAAG,EAAE,CAAC,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;4BACxB,OAAO,GAAG,IAAI,WAAW,KAAK,UAAU,IAAI,GAAG,KAAK,IAAI,OAAO,CAAC,cAAc,EAAE,EAAE;wBACrF,CAAC;qBACJ;iBACJ;gBACD,IAAI,EAAE;oBACF,WAAW,EAAE,KAAK;oBAClB,MAAM,EAAE;wBACJ,GAAG,EAAE,CAAC,IAAI,EAAE,OAAO,EAAE,EAAE;4BACnB,IAAI,GAAG,GAAG,KAAK,CAAC;4BAChB,IAAI,KAAK,GAAG,CAAC,CAAC;4BACd,IAAI,OAAO,CAAC,MAAM,GAAG,CAAC,EAAE;gCACpB,GAAG,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC,SAAS,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,MAAM,CAAC;gCAClD,KAAK,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC;6BAC5B;4BACD,IAAI,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC;4BACxC,OAAO,GAAG,IAAI,eAAe,OAAO,kBAAkB,GAAG,IAAI,OAAO,CAAC,cAAc,EAAE,EAAE,CAAC;wBAC5F,CAAC;qBACJ;iBACJ;gBACD,SAAS,EAAE;oBACP,KAAK,EAAE,wBAAwB;oBAC/B,KAAK,EAAE,YAAY;iBACtB;gBACD,MAAM,EAAE;oBACJ,MAAM,EAAC,KAAK;oBACZ,GAAG,EAAE,OAAO,CAAC,SAAS;oBACtB,IAAI,EAAE,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI;oBACvB,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,YAAY;oBAChC,MAAM,EAAE,CAAC,GAAG,EAAE,EAAE;wBACZ,4BAA4B;wBAC5B,8CAA8C;wBAC9C,IAAI,GAAG,CAAC,EAAE,EAAE;4BACR,OAAO,GAAG,CAAC,IAAI,EAAE,CAAC;yBACrB;wBACD,MAAM,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC,CAAC;oBACvC,CAAC;iBACJ;aACL,CAAC,CAAC;YAEF,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,QAAQ,CAAC,cAAc,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC;QACrE,CAAC;KAAA;IAED,iCAAiC;IAEjC,GAAG;IACG,MAAM;;YACR,IAAI,CAAC,QAAQ,CAAC,WAAW,EAAE,CAAC;QAChC,CAAC;KAAA;CA0BJ;AAEM,MAAM,WAAW;IAAxB;QACW,aAAQ,GAAW,mCAAmC,CAAC;QACvD,kBAAa,GAAW,kBAAkB,CAAC;QAC3C,oBAAe,GAAY,IAAI,CAAC;QAChC,eAAU,GAAW,EAAE,CAAC;QACxB,cAAS,GAAW,UAAU,CAAC;QAE/B,iBAAY,GAAkB,IAAI,KAAK,EAAU,CAAC;QAKlD,cAAS,GAAW,KAAK;QACzB,cAAS,GAAW,CAAC,CAAC;IAajC,CAAC;IAVG,cAAc;QACV,IAAI,WAAW,GAAG,EAAE,CAAC;QACrB,KAAK,IAAI,WAAW,IAAI,IAAI,CAAC,YAAY,EAAE;YACvC,IAAI,OAAO,GAAG,QAAQ,CAAC,cAAc,CAAC,WAAW,CAAqB,CAAC;YACvE,IAAI,OAAO,KAAI,IAAI,IAAI,OAAO,CAAC,KAAK,IAAI,IAAI,EAAE;gBAC1C,WAAW,IAAI,GAAG,WAAW,IAAI,OAAO,CAAC,KAAK,GAAG,CAAC;aACrD;SACJ;QACD,OAAO,WAAW,CAAC;IACvB,CAAC;CACJ;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5H2C;AAE5C,IAAY,YAKX;AALD,WAAY,YAAY;IACpB,+CAAI;IACJ,+CAAI;IACJ,+CAAI;IACJ,uDAAQ;AACZ,CAAC,EALW,YAAY,KAAZ,YAAY,QAKvB;AAoBM,MAAM,WAAW;IAQpB,YAAY,YAAoB,EAAE;QANlC,6BAA6B;QACrB,aAAQ,GAAgB,IAAI,OAAO,EAAE,CAAC;QACtC,yBAAoB,GAAW,kBAAkB,CAAC;QAClD,oBAAe,GAAW,gBAAgB,CAAC;QAC3C,mBAAc,GAAW,cAAc,CAAC;QAG5C,IAAI,OAAO,GAAG,IAAI,OAAO,EAAE,CAAC;QAC5B,OAAO,CAAC,GAAG,CAAC,eAAe,EAAE,SAAS,CAAC,CAAC;QACxC,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;IAC5B,CAAC;IAEY,GAAG,CAAC,GAAW,EAAE,MAAc,EAAE,YAA0B,EAAE,IAAU;;YAChF,IAAI,OAAO,GAAgB,EAAE,MAAM,EAAE,MAAM,EAAE,IAAI,EAAE,IAAI,EAAE,OAAO,EAAE,IAAI,CAAC,QAAQ,EAAE,CAAC;YAClF,IAAI,WAAW,GAAG,IAAI,qDAAW,EAAE,CAAC;YACpC,IAAI,eAAe,GAAG,YAAY,CAAC;YACnC,QAAQ,MAAM,EAAE;gBACZ,KAAK,MAAM;oBACP,eAAe,GAAG,aAAa,CAAC;oBAChC,MAAM;gBACV,KAAK,KAAK;oBACN,eAAe,GAAG,aAAa,CAAC;oBAChC,MAAM;gBACV,KAAK,QAAQ;oBACT,eAAe,GAAG,aAAa,CAAC;oBAChC,MAAM;gBACV;oBACI,eAAe,GAAG,YAAY,CAAC;oBAC/B,MAAM;aACb;YACD,WAAW,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;YAClC,MAAM,QAAQ,GAAiB,MAAM,KAAK,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;YACzD,IAAI;gBACA,IAAI,QAAQ,CAAC,EAAE,EAAE;oBACb,QAAQ,YAAY,EAAE;wBAClB,KAAK,YAAY,CAAC,IAAI;4BAClB,QAAQ,CAAC,IAAI,GAAG,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC;4BACtC,MAAM;wBACV,KAAK,YAAY,CAAC,QAAQ;4BACtB,QAAQ,CAAC,IAAI,GAAG,MAAM,QAAQ,CAAC,QAAQ,EAAE,CAAC;4BAC1C,MAAM;wBACV;4BACI,IAAI;gCACA,QAAQ,CAAC,IAAI,GAAG,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC;6BACzC;4BAAC,WAAM;gCACJ,IAAI;oCACA,QAAQ,CAAC,IAAI,GAAG,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC;iCACzC;gCAAC,WAAM;oCACJ,QAAQ,CAAC,IAAI,GAAG,EAAE,CAAC;iCACtB;6BACJ;4BACD,MAAM;qBACb;iBACJ;qBAAM;oBACH,IAAI;wBACA,QAAQ,CAAC,IAAI,GAAG,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC;qBACzC;oBAAC,WAAM;wBACJ,QAAQ,CAAC,IAAI,GAAG,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC;qBACzC;iBAEJ;aAEJ;YAAC,OAAO,EAAE,EAAE;gBACT,WAAW,CAAC,IAAI,EAAE,CAAC;gBACnB,MAAM,KAAK,CAAC,oDAAoD,CAAC;aACpE;YACD,WAAW,CAAC,IAAI,EAAE,CAAC;YACnB,qBAAqB;YACrB,aAAa;YACb,yCAAyC;YACzC,yBAAyB;YACzB,0DAA0D;YAC1D,SAAS;YACT,qCAAqC;YACrC,GAAG;YACH,OAAO,QAAQ,CAAC;QACpB,CAAC;KAAA;IAEY,OAAO,CAAC,GAAW;;YAC5B,OAAO,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,EAAE,YAAY,CAAC,IAAI,CAAC,CAAC;QACnD,CAAC;KAAA;IAEY,OAAO,CAAC,GAAW;;YAC5B,OAAO,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,EAAE,YAAY,CAAC,IAAI,CAAC,CAAC;QACnD,CAAC;KAAA;IAEY,OAAO,CAAC,GAAW;;YAC5B,OAAO,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,EAAE,YAAY,CAAC,IAAI,CAAC,CAAC;QACnD,CAAC;KAAA;IACY,WAAW,CAAC,GAAW;;YAChC,OAAO,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,EAAE,YAAY,CAAC,QAAQ,CAAC,CAAC;QACvD,CAAC;KAAA;IAEY,QAAQ,CAAC,GAAW,EAAE,IAAS;;YACxC,OAAO,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,MAAM,EAAE,YAAY,CAAC,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;QAC1E,CAAC;KAAA;IAEY,QAAQ,CAAC,GAAW,EAAE,IAAS;;YACxC,OAAO,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,MAAM,EAAE,YAAY,CAAC,IAAI,EAAE,IAAI,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;QACxE,CAAC;KAAA;IAEY,OAAO,CAAC,GAAW,EAAE,IAAS,EAAE,OAAoB,EAAE,MAAM,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE;;YAC1G,OAAO,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,EAAE,YAAY,CAAC,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;QACzE,CAAC;KAAA;IAEY,OAAO,CAAC,GAAW,EAAE,IAAS;;YACvC,OAAO,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,EAAE,YAAY,CAAC,IAAI,EAAE,IAAI,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;QACvE,CAAC;KAAA;IAEY,UAAU,CAAC,GAAW,EAAE,IAAS;;YAC1C,OAAO,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,QAAQ,EAAE,YAAY,CAAC,IAAI,EAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;QAC3E,CAAC;KAAA;IAEY,UAAU,CAAC,GAAW,EAAE,IAAS;;YAC1C,OAAO,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,QAAQ,EAAE,YAAY,CAAC,IAAI,EAAE,IAAI,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;QAC1E,CAAC;KAAA;CACJ;;;;;;;;;;;;;;;;ACjJM,MAAM,WAAW;IAAxB;QAEY,iCAA4B,GAAW,mBAAmB,CAAC;QAE3D,0BAAqB,GAAY,KAAK,CAAC;IAoDnD,CAAC;IAjDU,IAAI,CAAC,UAAgB,YAAY,EAAE,wBAAgC,IAAI;QAC1E,IAAI,CAAC,sBAAsB,GAAG,qBAAqB,CAAC;QACpD,IAAI,CAAC,qBAAqB,GAAG,IAAI,CAAC;QAClC,IAAI,CAAC,2BAA2B,GAAG,IAAI,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,UAAU,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC,EAAE,IAAI,CAAC,sBAAsB,CAAC,CAAC;IACnJ,CAAC;IAEM,IAAI;QACP,IAAI,CAAC,eAAe,EAAE,CAAC;IAC3B,CAAC;IAEO,eAAe,CAAC,UAAkB,YAAY;QAClD,IAAI,IAAI,CAAC,qBAAqB,EAAE;YAC5B,IAAI,SAAS,GAAG,6FAA6F,OAAO,2CAA2C,OAAO,SAAS,CAAC;YAChL,IAAI,iBAAiB,GAAG,IAAI,CAAC,mBAAmB,EAAE,CAAC;YACnD,iBAAiB,CAAC,SAAS,GAAG,SAAS,CAAC;YACxC,iBAAiB,CAAC,KAAK,CAAC,OAAO,GAAG,OAAO;SAC5C;IACL,CAAC;IAEO,eAAe;QACnB,IAAI,CAAC,qBAAqB,GAAG,KAAK,CAAC;QACnC,IAAI,iBAAiB,GAAG,QAAQ,CAAC,cAAc,CAAC,IAAI,CAAC,4BAA4B,CAAmB,CAAC;QACrG,IAAI,iBAAiB,KAAK,IAAI,EAAE;YAC5B,iBAAiB,CAAC,KAAK,CAAC,OAAO,GAAG,MAAM,CAAC;SAC5C;QACD,YAAY,CAAC,IAAI,CAAC,2BAA2B,CAAC,CAAC;IACnD,CAAC;IAEO,mBAAmB;QACvB,IAAI,iBAAiB,GAAG,QAAQ,CAAC,cAAc,CAAC,IAAI,CAAC,4BAA4B,CAAmB,CAAC;QACrG,IAAI,iBAAiB,KAAK,IAAI,EAAE;YAC5B,IAAI,SAAS,GAAG,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC;YACvC,IAAI,uBAAuB,GAAY,KAAK,CAAC;YAC7C,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;gBACvC,IAAI,SAAS,CAAC,CAAC,CAAC,CAAC,EAAE,KAAK,IAAI,CAAC,4BAA4B,EAAE;oBACvD,uBAAuB,GAAG,IAAI,CAAC;oBAC/B,MAAM;iBACT;aACJ;YACD,IAAI,CAAC,uBAAuB,EAAE;gBAC1B,IAAI,OAAO,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;gBAC5C,OAAO,CAAC,EAAE,GAAG,IAAI,CAAC,4BAA4B,CAAC;gBAC/C,QAAQ,CAAC,IAAI,CAAC,YAAY,CAAC,OAAO,EAAE,QAAQ,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;gBAC9D,iBAAiB,GAAG,QAAQ,CAAC,cAAc,CAAC,IAAI,CAAC,4BAA4B,CAAmB,CAAC;aACpG;SACJ;QACD,OAAO,iBAAiB,CAAC;IAC7B,CAAC;CAEJ;;;;;;;;;;;;;;;;;;;;;;;;;;ACxDD,IAAI,UAAU,GAAG,CAAC,QAAQ,EAAE,EAAE;IAC1B,IAAI,QAAQ,CAAC,UAAU,IAAI,SAAS,EAAE;QAClC,kCAAkC;QAClC,QAAQ,CAAC,gBAAgB,CAAC,kBAAkB,EAAE,QAAQ,CAAC,CAAC;KAC3D;SACI;QACD,QAAQ,EAAE,CAAC;KACd;AACL,CAAC;AAEM,MAAM,QAAQ;IAEJ,uBAAuB,CAAC,MAAW;;YAC5C,IAAI,QAAQ,GAAG,MAAM,CAAC,cAAc,CAAC,oBAAoB,CAAmB,CAAC;YAC7E,IAAI,QAAQ,KAAK,IAAI,EAAE;gBACnB,IAAI,SAAS,GAAG,MAAM,CAAC,QAAQ,CAAC;gBAChC,IAAI,cAAc,GAAY,KAAK,CAAC;gBACpC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;oBACvC,IAAI,SAAS,CAAC,CAAC,CAAC,CAAC,EAAE,KAAK,oBAAoB,EAAE;wBAC1C,cAAc,GAAG,IAAI,CAAC;wBACtB,MAAM;qBACT;iBACJ;gBACD,IAAI,CAAC,cAAc,EAAE;oBACjB,IAAI,OAAO,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;oBAC5C,OAAO,CAAC,EAAE,GAAG,oBAAoB,CAAC;oBAClC,QAAQ,CAAC,YAAY,CAAC,OAAO,EAAE,QAAQ,CAAC,UAAU,CAAC,CAAC;oBACpD,QAAQ,GAAG,MAAM,CAAC,cAAc,CAAC,oBAAoB,CAAmB,CAAC;iBAC5E;aACJ;YACD,OAAO,QAAQ,CAAC;QACpB,CAAC;KAAA;IAEK,aAAa,CAAC,IAAY;QAC5B,IAAI,UAAU,GAAG,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK;YACxC,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK;YAC1B,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;QAChC,IAAI,OAAO,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC;QAC7B,IAAI,GAAG,GAAG,OAAO,CAAC,OAAO,EAAE,CAAC;QAE5B,IAAI,UAAU,GAAG,OAAO,CAAC,QAAQ,EAAE,CAAC;QACpC,IAAI,SAAS,GAAG,UAAU,CAAC,UAAU,CAAC,CAAC;QAEvC,IAAI,IAAI,GAAG,OAAO,CAAC,WAAW,EAAE,CAAC;QAEjC,OAAO,GAAG,GAAG,IAAI,SAAS,IAAI,IAAI,EAAE,CAAC;IACzC,CAAC;CACJ;AACoB","file":"common-bundle.js","sourcesContent":["import { ProgressBar } from './ProgressBar';\r\n/*import $ from 'jquery';*/\r\nclass FormResponse extends Response {\r\n    data?: any;\r\n    //success: boolean;\r\n    //statusCode: number;\r\n}\r\nexport class FormManager {\r\n\r\n    public _form: HTMLFormElement;\r\n    private _validClass: string;\r\n    private _invalidClass: string;\r\n    private _validationRequiredMessageAttribute: string = 'data-val-required';//The ${FirstName} field is required.\r\n    private _validationMaxLengthMessageAttribute: string = 'data-val-maxlength';//The field ${FirstName} must be a string or array type with a maximum length of '20'.\r\n    //private _validationMaxLengthValueAttribute: string = 'data-val-maxlength-max';//20\r\n    private _validationPhoneMessageAttribute: string = 'data-val-phone';//The ${Phone} field is not a valid phone number.\r\n    private _validationEmailMessageAttribute: string = 'data-val-email';//The ${EmailAddress} field is not a valid e-mail address.\r\n    private _validationNumberMessageAttribute: string = 'data-val-range';//The field Number of Days must be between 1 and 10000.\r\n    private _validationNumberMinRangeAttribute: string = 'data-val-range-min';//1\r\n    private _validationNumberMaxRangeAttribute: string = 'data-val-range-max';//1000\r\n    private _validationIntegerMessageAttribute: string = 'data-val-integer';//The ${Integer} field is not a valid integer.\r\n\r\n    private _validationFieldLabelAttribute: string = 'data-val-field-label';\r\n    private _antiforgeryTokenHeaderName: string = '__RequestVerificationToken';\r\n    private _headerAlertMessageName: string = 'HeaderAlertMessage';\r\n    \r\n    constructor(formId: string, validClass: string = \"is-valid\", invalidClass: string = \"is-invalid\") {    \r\n    this._form = document.getElementById(formId) as HTMLFormElement;\r\n        if (this._form === null) { throw Error(`Form with Id ${formId} is not found`);}\r\n        this._validClass = validClass;\r\n        this._invalidClass = invalidClass;\r\n        this.HideAllValidationMessages();\r\n    }\r\n\r\n    public async HideAllValidationMessages(): Promise<void> {\r\n        let validationElement = document.getElementsByClassName(this._invalidClass)[0] as HTMLInputElement\r\n        if (validationElement !== undefined) {\r\n            validationElement.classList.remove(this._invalidClass);\r\n            validationElement.classList.add(this._validClass);\r\n        }\r\n        let headerMessagElement = document.getElementById(this._headerAlertMessageName) as HTMLDivElement;\r\n        if (headerMessagElement !== null) {\r\n            headerMessagElement.innerText = '';\r\n            headerMessagElement.style.display = 'none';\r\n        }\r\n    }\r\n\r\n    public async ValidateForm(): Promise<boolean> {\r\n        await this.HideAllValidationMessages();\r\n        let formValid: boolean = true;\r\n        //await this.RemoveAllValidationSpans();\r\n        let elements = Array.from(this._form.elements);\r\n       \r\n        for (let element of elements) {\r\n            let input = element as HTMLInputElement;\r\n            if (input.type === 'button') {\r\n                continue;\r\n            }\r\n            let controlDisplayText = input.id;\r\n            let valFieldLabel = input.attributes.getNamedItem(this._validationFieldLabelAttribute);\r\n            if (valFieldLabel !== null) {\r\n                controlDisplayText = valFieldLabel.value\r\n            }\r\n            await this.ValidateInputForRequired(input);\r\n            if (!formValid) {\r\n                continue;\r\n            }\r\n            await this.ValidateInputForMaxLength(input, controlDisplayText);\r\n            if (!formValid) {\r\n                continue;\r\n            }\r\n            switch (input.type) {\r\n                case 'email':\r\n                    formValid = await this.ValidateEmailInput(input);\r\n                    break;\r\n                case 'tel':\r\n                    formValid = await this.ValidatePhoneInput(input);\r\n                    break;\r\n                case 'number':\r\n                    formValid = await this.ValidateNumberInput(input);\r\n                    break;\r\n            }\r\n            if (!formValid) {\r\n                continue;\r\n            }\r\n        }\r\n        return formValid;\r\n    }\r\n\r\n    public async SubmitForm(url: string='', method: string='post', antiforgeryToken: string = ''): Promise<FormResponse> {\r\n        if (url==undefined || url === '') {\r\n            url = this._form.attributes.getNamedItem('action').value;\r\n        }\r\n\r\n        let headers: HeadersInit = [];\r\n        if (antiforgeryToken !== '') {\r\n            headers.push([this._antiforgeryTokenHeaderName, antiforgeryToken]);\r\n        }\r\n        let formData = new FormData(this._form);\r\n        let request: RequestInit = { method: method, body: formData, headers: headers };\r\n        let progressBar = new ProgressBar();\r\n        progressBar.show('Saving...');\r\n        try {\r\n            const response: FormResponse = await fetch(url, request);\r\n            progressBar.hide();\r\n            response.data = await response.text();\r\n            return response;\r\n        } catch (ex) {\r\n            progressBar.hide();\r\n            throw Error(`Error occurred while deserialize the Form Response to JSON : ${ex}`)\r\n        }\r\n    }\r\n\r\n    public HandleErrors(response: FormResponse): FormResponse {\r\n        if (!response.ok) {\r\n            throw Error(response.statusText);\r\n        }\r\n        return response;\r\n    }\r\n\r\n    public async ShowSuccessFailureMessage(response: FormResponse, sucessMessage: string = 'Data is saved successfully!', errorMessage: string = 'An error has been occurred while saving the data.'): Promise<void> {\r\n        let alertDiv = document.getElementById(this._headerAlertMessageName) as HTMLDivElement;\r\n        if (alertDiv === null) {\r\n            let childerns = this._form.children;\r\n            let alertDivExists: boolean = false;\r\n            for (let element of Array.from(childerns)) {\r\n                if (element.id === this._headerAlertMessageName) {\r\n                    alertDivExists = true;\r\n                    break;\r\n                }\r\n            }\r\n            if (!alertDivExists) {\r\n                let divItem = document.createElement(\"div\");\r\n                divItem.id = this._headerAlertMessageName;\r\n                this._form.insertBefore(divItem, this._form.firstChild);\r\n                alertDiv = document.getElementById(this._headerAlertMessageName) as HTMLDivElement;\r\n            }\r\n        }\r\n        let message = '';\r\n        let alertStyle = 'alert-warning';\r\n        if (alertDiv !== null) {\r\n            alertDiv.style.display = 'visible';\r\n            if (response.ok) {\r\n                message = sucessMessage;\r\n                alertStyle = 'alert-success';\r\n            } else {\r\n                let data = await response.data;\r\n                if (response.status == 500) {\r\n                    message = `${errorMessage}:<br/> ${response.status}: ${data}`;\r\n                    alertStyle = 'alert-danger';\r\n                } else {//Model State Validation Error\r\n                    //message += `Please correct the following validation errors:<ul>`;\r\n                    try {\r\n                        let errors = JSON.parse(data);\r\n                        if (errors === undefined) {\r\n                            message += await this.GetErrorMessage(data[0]);\r\n                        } else {\r\n                            for (var key in errors) {\r\n                                if (errors.hasOwnProperty(key)) {\r\n                                    message += await this.GetErrorMessage(errors[key]);\r\n                                }\r\n                            }\r\n                        }\r\n                    } catch (ex) {\r\n                        message += await this.GetErrorMessage(data[0]);\r\n                    }\r\n                    if (message.length > 0) {\r\n                        message = `Please correct the following validation errors: <ul>${message}</ul>`;\r\n                    } else {\r\n                        message = `Please correct the following validation errors`;\r\n                    }\r\n                    \r\n                    alertStyle = 'alert-warning';\r\n                }\r\n            }\r\n            alertDiv.style.display = 'block';\r\n        } else {\r\n            if (response.ok) {\r\n                alert('Saved Sucessfully');\r\n            } else {\r\n                alert(`An error occured: ${response.status}: ${response.statusText}`);\r\n            }\r\n            return;\r\n        }\r\n        let template = `<div class=\"alert ${alertStyle} alert-dismissible fade show\" role=\"alert\">\r\n              ${message}\r\n              <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button>\r\n            </div>`;\r\n        alertDiv.innerHTML = template;\r\n    }\r\n\r\n    private async GetErrorMessage(error: any): Promise<string> {\r\n        let message: string = '';\r\n        let errorMessage = error.message;\r\n        if (errorMessage === undefined) {\r\n            errorMessage = error.Message;\r\n        }\r\n        let filedName = error.name;\r\n        if (filedName === undefined) {\r\n            filedName = error.Name;\r\n        }\r\n        if (filedName === '') {\r\n            message += `<li>${errorMessage}</li>`;\r\n        } else {\r\n            let foundInput = await this.DisplayValidationMessage(filedName, errorMessage, false);\r\n            if (foundInput === false) {\r\n                message += `<li>${errorMessage}</li>`;\r\n            } \r\n        }\r\n        return message;\r\n    }\r\n    private async DisplayValidationMessage(controlId: string, message: string, valid: boolean): Promise<boolean> {\r\n        let input = document.getElementById(controlId) as HTMLInputElement;\r\n        if (input === null) {\r\n            let inputs = document.getElementsByName(controlId);\r\n            if (inputs.length > 0) {\r\n                input = inputs[0] as HTMLInputElement;\r\n            }\r\n        }\r\n        if (input === null) { return false;}\r\n        if (input !== null) {\r\n            if (valid) {\r\n                input.classList.remove(this._invalidClass);\r\n                input.classList.add(this._validClass);\r\n            } else {\r\n                input.classList.remove(this._validClass);\r\n                input.classList.add(this._invalidClass);\r\n            }\r\n            let childerns = Array.from(input.parentElement.children);\r\n            let validationSpanExists: boolean = false;\r\n            for (let childern of childerns) {\r\n                if (childern.classList.contains('invalid-feedback')) {\r\n                    let spanItem = childern as HTMLSpanElement;\r\n                    spanItem.innerText = message;   \r\n                    spanItem.style.display = 'block';\r\n                    validationSpanExists = true;                   \r\n                    break;\r\n                }\r\n            }\r\n            if (!validationSpanExists) {\r\n                let spanItem = document.createElement(\"span\");\r\n                spanItem.classList.add('invalid-feedback');\r\n                spanItem.innerText = message;\r\n                spanItem.style.display = 'block';\r\n                input.parentElement.appendChild(spanItem);               \r\n            }\r\n            return true;\r\n        }\r\n    }\r\n\r\n    //private async RemoveAllValidationSpans(): Promise<void> {\r\n    //    let elements = Array.from(this._form.elements);\r\n    //    for (let element of elements) {\r\n    //        let input = element as HTMLInputElement;\r\n    //        if (input.type === 'button') {\r\n    //            continue;\r\n    //        }\r\n    //        let childerns = Array.from(input.parentElement.children);\r\n    //        for (let childern of childerns) {\r\n    //            if (childern.classList.contains('invalid-feedback')) {\r\n    //                //let spanItem = childern as HTMLSpanElement;\r\n    //                childerns = [];\r\n    //                break;\r\n    //            }\r\n    //        }\r\n    //    }\r\n        \r\n    //}\r\n    private async ValidateInputForRequired(input: HTMLInputElement): Promise<boolean> {\r\n        let requiredAttribute = input.attributes.getNamedItem(this._validationRequiredMessageAttribute);\r\n        if (requiredAttribute !== null) {\r\n            if (input.value.trim() === \"\") {\r\n                await this.DisplayValidationMessage(input.id, requiredAttribute.value, false)\r\n                return false;\r\n            } else {\r\n                await this.DisplayValidationMessage(input.id, '', true)\r\n            }\r\n        } else {\r\n            await this.DisplayValidationMessage(input.id, '', true)\r\n        }\r\n        return true;\r\n    }\r\n\r\n    private async ValidateInputForMaxLength(input: HTMLInputElement, controlDisplayText: string): Promise<boolean> {\r\n        let maxLengthAttribute = input.attributes.getNamedItem('maxlength');\r\n        if (maxLengthAttribute !== null) {\r\n            if (input.value.length > Number(maxLengthAttribute.value)) {\r\n                let maxLengthAttributeValidationMessage = input.attributes.getNamedItem(this._validationMaxLengthMessageAttribute);\r\n                let validationMessage = `The field ${controlDisplayText} must be a string or array type with a maximum length of '${maxLengthAttribute.value}'.`;\r\n                if (maxLengthAttributeValidationMessage != null) {\r\n                    validationMessage = maxLengthAttributeValidationMessage.value;\r\n                }\r\n                await this.DisplayValidationMessage(input.id, validationMessage, false)\r\n                return false;\r\n            } else {\r\n                await this.DisplayValidationMessage(input.id, '', true)\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    private async ValidateEmailInput(input: HTMLInputElement): Promise<boolean> {\r\n        if (input.value.trim() !== \"\") {\r\n            let emailAttribute = input.attributes.getNamedItem(this._validationEmailMessageAttribute);\r\n            if (emailAttribute !== null) {\r\n                let validEmail = await this.ValidateEmail(input.value);\r\n                if (!validEmail) {\r\n                    await this.DisplayValidationMessage(input.id, emailAttribute.value, false)\r\n                    return false;\r\n                } else {\r\n                    await this.DisplayValidationMessage(input.id, '', true)\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n\r\n    private async ValidateEmail(mail: string): Promise<boolean> {\r\n        if (/^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/.test(mail)) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    private async ValidatePhoneInput(input: HTMLInputElement): Promise<boolean> {\r\n        if (input.value.trim() !== \"\") {\r\n            let phoneAttribute = input.attributes.getNamedItem(this._validationPhoneMessageAttribute);\r\n            if (phoneAttribute !== null) {\r\n                let validPhone = await this.ValidatePhone(input.value);\r\n                if (!validPhone) {\r\n                    await this.DisplayValidationMessage(input.id, phoneAttribute.value, false)\r\n                    return false;\r\n                } else {\r\n                    await this.DisplayValidationMessage(input.id, '', true)\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    private async ValidatePhone(phone: string): Promise<boolean> {\r\n        //XXXXXXXXXX\r\n        let format = /^\\d{10}$/;\r\n        if (phone.trim().match(format)) {\r\n            return true;\r\n        } else {\r\n            //XXX-XXX-XXXX or XXX.XXX.XXXX or XXX XXX XXXX\r\n            format = /^\\(?([0-9]{3})\\)?[-. ]?([0-9]{3})[-. ]?([0-9]{4})$/;\r\n            if (phone.trim().match(format)) {\r\n                return true;\r\n            } else {\r\n                //+XX-XXXX-XXXX or +XX.XXXX.XXXX or + XX XXXX XXXX\r\n                format = /^\\+?([0-9]{2})\\)?[-. ]?([0-9]{4})[-. ]?([0-9]{4})$/;\r\n                if (phone.trim().match(format)) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        return false\r\n    }\r\n\r\n    private async ValidateDecimal(value: string, minValue: number, maxValue: number): Promise<boolean> {\r\n        let number = Number(value.trim());\r\n        if (number !== null) {\r\n            if (number >= minValue && number <= maxValue) {\r\n                return true\r\n            }\r\n        } \r\n        return false\r\n    }\r\n\r\n    private async ValidateNumberInput(input: HTMLInputElement): Promise<boolean> {\r\n        if (input.value.trim() !== \"\") {\r\n\r\n            let numberAttribute = input.attributes.getNamedItem(this._validationNumberMessageAttribute);\r\n            if (numberAttribute !== null) {\r\n                let numberMinRangeAttribute = input.attributes.getNamedItem(this._validationNumberMinRangeAttribute);\r\n                let minValue = Number.MIN_VALUE;\r\n                if (numberMinRangeAttribute !== null) {\r\n                    minValue = Number(numberMinRangeAttribute.value);\r\n                }\r\n                let numberMaxRangeAttribute = input.attributes.getNamedItem(this._validationNumberMaxRangeAttribute);\r\n                let maxValue = Number.MAX_VALUE;\r\n                if (numberMaxRangeAttribute !== null) {\r\n                    maxValue = Number(numberMaxRangeAttribute.value);\r\n                }\r\n                let validNumber = await this.ValidateDecimal(input.value, minValue, maxValue);\r\n                if (!validNumber) {\r\n                    await this.DisplayValidationMessage(input.id, numberAttribute.value, false)\r\n                    return false;\r\n                } else {\r\n                    await this.DisplayValidationMessage(input.id, '', true)\r\n                }\r\n            }\r\n            let integerAttribute = input.attributes.getNamedItem(this._validationIntegerMessageAttribute);\r\n            if (integerAttribute !== null) {\r\n                let numberMinRangeAttribute = input.attributes.getNamedItem(this._validationNumberMinRangeAttribute);\r\n                let minValue = Number.MIN_VALUE;\r\n                if (numberMinRangeAttribute !== null) {\r\n                    minValue = Number(numberMinRangeAttribute.value);\r\n                }\r\n                let numberMaxRangeAttribute = input.attributes.getNamedItem(this._validationNumberMaxRangeAttribute);\r\n                let maxValue = Number.MAX_VALUE;\r\n                if (numberMaxRangeAttribute !== null) {\r\n                    maxValue = Number(numberMaxRangeAttribute.value);\r\n                }\r\n                let validInteger = await this.ValidateInteger(input.value, minValue, maxValue);\r\n                if (!validInteger) {\r\n                    await this.DisplayValidationMessage(input.id, integerAttribute.value, false)\r\n                    return false;\r\n                } else {\r\n                    await this.DisplayValidationMessage(input.id, '', true)\r\n                }\r\n            }\r\n\r\n        }\r\n        return true;\r\n    }\r\n\r\n    private async ValidateInteger(value: string, minValue: number, maxValue: number): Promise<boolean> {\r\n        let format = /^[0-9]+$/;\r\n        if (value.trim().match(format)) {\r\n            let number = Number(value.trim());\r\n            if (number >= minValue && number <= maxValue) {\r\n                return true\r\n            }\r\n            return false;\r\n        }\r\n        return false\r\n    }\r\n\r\n    private async ValidateAllLetters(value: string): Promise<boolean> {\r\n        let format = /^[A-Za-z]+$/;\r\n        if (value.trim().match(format)) {\r\n            return true;\r\n        }\r\n        return false\r\n    }\r\n}","import { Grid } from \"gridjs\";\r\n\r\nexport class GridManager {\r\n\r\n    public DataGrid: Grid;\r\n    async Init(setting: GridSetting): Promise<void> {\r\n        await this.InitSettings(setting);\r\n    }\r\n\r\n    async InitSettings(setting: GridSetting): Promise<void> {\r\n        \r\n        this.DataGrid = new Grid({\r\n            autoWidth:true,\r\n            width: \"100%\",\r\n            /*height: '400px',*/\r\n            fixedHeader: true,\r\n            resizable: true,\r\n            columns: setting.Columns,\r\n            pagination: {\r\n                enabled: setting.AllowPagination,\r\n                limit: setting.PageLength,\r\n                server: {\r\n                    url: (prev, page, limit) => {\r\n                       return `${prev}&length=${limit}&start=${page * limit}&${setting.GetSearchQuery()}`\r\n                    }\r\n                }\r\n            },\r\n            sort: {\r\n                multiColumn: false,\r\n                server: {\r\n                    url: (prev, columns) => {\r\n                        let dir = 'asc';\r\n                        let index = 0;\r\n                        if (columns.length > 0) {\r\n                            dir = columns[0].direction === 1 ? 'asc' : 'desc';\r\n                            index = columns[0].index;\r\n                        }\r\n                        let colName = setting.Columns[index].id;\r\n                        return `${prev}&SortColumn=${colName}&SortDirection=${dir}&${setting.GetSearchQuery()}`;\r\n                    }\r\n                }\r\n            },\r\n            className: {\r\n                table: 'table table-responsive',\r\n                thead: 'table-dark'\r\n            },\r\n            server: {\r\n                method:\"GET\",\r\n                url: setting.SearchUrl,\r\n                then: data => data.data,\r\n                total: data => data.recordsTotal,\r\n                handle: (res) => {\r\n                    // no matching records found\r\n                    //if (res.status === 404) return { data: [] };\r\n                    if (res.ok) {\r\n                        return res.json();\r\n                    }\r\n                    throw Error(res.status.toString());\r\n                }\r\n            }\r\n       });\r\n\r\n        this.DataGrid.render(document.getElementById(setting.Container)); \r\n    }\r\n\r\n    //async OnLoad(): Promise<void> {\r\n\r\n    //}\r\n    async Search(): Promise<void> {\r\n        this.DataGrid.forceRender();\r\n    }\r\n\r\n    //async CheckAll(parentCheckBox:any, childCheckBox:any):Promise<void> {\r\n        //var isChecked = $('input[id=\"' + parentCheckBox + '\"]').prop('checked');\r\n        //if (isChecked) {\r\n        //    $('input[id=\"' + childCheckBox + '\"]').prop('checked', true);\r\n        //}\r\n        //else {\r\n        //    $('input[id=\"' + childCheckBox + '\"]').prop('checked', false);\r\n        //}\r\n    //}\r\n\r\n    //async DeleteRecord(rowId: any, deleteUrl: string, container: string): Promise<void> {\r\n        //if (confirm(\"Are you sure you want to delete the record?\")) {\r\n        //    var url = deleteUrl + rowId;\r\n        //    $.ajax({\r\n        //        url: url,\r\n        //        type: \"POST\",\r\n        //        async: false,\r\n        //        cache: false,\r\n        //        success: function (result) {\r\n        //            this.RefreshGrid(container);\r\n        //        }\r\n        //    });\r\n        //}\r\n    //}\r\n}\r\n\r\nexport class GridSetting {\r\n    public InfoText: string = \"Showing _PAGE_ of _PAGES_ entries\";\r\n    public InfoEmptyText: string = \"No Records found\";\r\n    public AllowPagination: boolean = true;\r\n    public PageLength: number = 10;\r\n    public Container: string = \"DataGrid\";\r\n    public Columns: any;\r\n    public SearchFields: Array<string> = new Array<string>();\r\n    public SearchUrl: string;\r\n    public CreateUrl: string;\r\n    public EditUrl: string;\r\n    public DeleteUrl: string;\r\n    public SortOrder: string = \"asc\"\r\n    public SortIndex: number = 0;\r\n    public SucessFunction: string;\r\n\r\n    GetSearchQuery(): string {\r\n        let searchQuery = '';\r\n        for (let searchField of this.SearchFields) {\r\n            let element = document.getElementById(searchField) as HTMLInputElement;\r\n            if (element !==null && element.value != null) {\r\n                searchQuery += `${searchField}=${element.value}&`;\r\n            }\r\n        }\r\n        return searchQuery;\r\n    }\r\n}","import { ProgressBar } from './ProgressBar';\r\n\r\nexport enum ResponseType {\r\n    Json,\r\n    Text,\r\n    Blob,\r\n    FormData,\r\n}\r\n\r\ninterface HttpResponse extends Response {\r\n    data?: any;\r\n}\r\n\r\ninterface IHttpManager {\r\n    get(url: string, method: string, responseType: ResponseType, body?: any): Promise<HttpResponse>;\r\n    getJson(url: string): Promise<HttpResponse>;\r\n    getText(url: string): Promise<HttpResponse>;\r\n    getBlob(url: string): Promise<HttpResponse>;\r\n    getFormData(url: string): Promise<HttpResponse>;\r\n    postJson(url: string, body: any): Promise<HttpResponse>;\r\n    postForm(url: string, body: any): Promise<HttpResponse>;\r\n    putJson(url: string, body: any): Promise<HttpResponse>;\r\n    putForm(url: string, body: any): Promise<HttpResponse>;\r\n    deleteJson(url: string, body: any): Promise<HttpResponse>;\r\n    deleteForm(url: string, body: any): Promise<HttpResponse>;\r\n}\r\n\r\nexport class HttpManager implements IHttpManager {\r\n\r\n    //private _authToken: string;\r\n    private _headers: HeadersInit = new Headers();\r\n    private _requestedWithHeader: string = \"X-Requested-With\";\r\n    private _xmlHttpRequest: string = \"XMLHttpRequest\";\r\n    private _authTokenName: string = \"X-XSRF-TOKEN\";\r\n\r\n    constructor(authToken: string = \"\") {\r\n        let headers = new Headers();\r\n        headers.set(\"Authorization\", authToken);\r\n        this._headers = headers;\r\n    }\r\n\r\n    public async get(url: string, method: string, responseType: ResponseType, body?: any): Promise<HttpResponse> {\r\n        let request: RequestInit = { method: method, body: body, headers: this._headers };\r\n        let progressBar = new ProgressBar();\r\n        let progressMessage = \"Loading...\";\r\n        switch (method) {\r\n            case 'post':\r\n                progressMessage = \"Creating...\";\r\n                break;\r\n            case 'put':\r\n                progressMessage = \"Updating...\";\r\n                break;\r\n            case 'delete':\r\n                progressMessage = \"Deleting...\";\r\n                break;\r\n            default:\r\n                progressMessage = \"Loading...\";\r\n                break;\r\n        }\r\n        progressBar.show(progressMessage);\r\n        const response: HttpResponse = await fetch(url, request);\r\n        try {\r\n            if (response.ok) {\r\n                switch (responseType) {\r\n                    case ResponseType.Blob:\r\n                        response.data = await response.blob();\r\n                        break;\r\n                    case ResponseType.FormData:\r\n                        response.data = await response.formData();\r\n                        break;\r\n                    default:\r\n                        try {\r\n                            response.data = await response.json();\r\n                        } catch {\r\n                            try {\r\n                                response.data = await response.text();\r\n                            } catch {\r\n                                response.data = \"\";\r\n                            }\r\n                        }\r\n                        break;\r\n                }\r\n            } else {\r\n                try {\r\n                    response.data = await response.json();\r\n                } catch {\r\n                    response.data = await response.text();\r\n                }\r\n                \r\n            }\r\n            \r\n        } catch (ex) {\r\n            progressBar.hide();\r\n            throw Error(`Error occurred while deserialize the Form Response`)\r\n        }\r\n        progressBar.hide();\r\n        //if (!response.ok) {\r\n        //    //try {\r\n        //    //    alert(response.data.Message);\r\n        //    //} catch (error) {\r\n        //    //    alert(response.status + \": \" + response.data);\r\n        //    //}\r\n        //    throw new Error(response.data);\r\n        //}\r\n        return response;\r\n    }\r\n\r\n    public async getJson(url: string): Promise<HttpResponse> {\r\n        return this.get(url, \"get\", ResponseType.Json);\r\n    }\r\n\r\n    public async getText(url: string): Promise<HttpResponse> {\r\n        return this.get(url, \"get\", ResponseType.Text);\r\n    }\r\n\r\n    public async getBlob(url: string): Promise<HttpResponse> {\r\n        return this.get(url, \"get\", ResponseType.Blob);\r\n    }\r\n    public async getFormData(url: string): Promise<HttpResponse> {\r\n        return this.get(url, \"get\", ResponseType.FormData);\r\n    }\r\n\r\n    public async postJson(url: string, body: any): Promise<HttpResponse> {\r\n        return this.get(url, \"post\", ResponseType.Json, JSON.stringify(body));\r\n    }\r\n\r\n    public async postForm(url: string, body: any): Promise<HttpResponse> {\r\n        return this.get(url, \"post\", ResponseType.Json, new FormData(body));\r\n    }\r\n\r\n    public async putJson(url: string, body: any, args: RequestInit = { method: \"put\", body: JSON.stringify(body) }): Promise<HttpResponse> {\r\n        return this.get(url, \"put\", ResponseType.Json, JSON.stringify(body));\r\n    }\r\n\r\n    public async putForm(url: string, body: any): Promise<HttpResponse> {\r\n        return this.get(url, \"put\", ResponseType.Json, new FormData(body));\r\n    }\r\n\r\n    public async deleteJson(url: string, body: any): Promise<HttpResponse> {\r\n        return this.get(url, \"delete\", ResponseType.Json,JSON.stringify(body));\r\n    }\r\n\r\n    public async deleteForm(url: string, body: any): Promise<HttpResponse> {\r\n        return this.get(url, \"delete\", ResponseType.Json, new FormData(body));\r\n    }\r\n}","export class ProgressBar {\r\n\r\n    private _loadingIndicatorElementName: string = \"loading-indicator\";\r\n    private _loadingIndicatorDelay: number;\r\n    private _showLoadingIndicator: boolean = false;\r\n    private _loadingIndicatortimeOutRef;\r\n\r\n    public show(message: string='Loading...', loadingIndicatorDelay: number = 2000): void {\r\n        this._loadingIndicatorDelay = loadingIndicatorDelay;\r\n        this._showLoadingIndicator = true;\r\n        this._loadingIndicatortimeOutRef = new Promise(resolve => setTimeout(resolve.call(this.showProgressBar(message)), this._loadingIndicatorDelay))\r\n    }\r\n\r\n    public hide(): void {\r\n        this.hideProgressBar();\r\n    }\r\n\r\n    private showProgressBar(message: string = 'Loading...'): void {\r\n        if (this._showLoadingIndicator) {\r\n            let indecator = `<div class=\"spinner-border text-primary loading-Icon\" role=\"status\"><span class=\"sr-only\">${message}</span></div><span class=\"loading-text\">${message}</span>`;\r\n            let lodiningIndecator = this.getLoadingIndicator();\r\n            lodiningIndecator.innerHTML = indecator;\r\n            lodiningIndecator.style.display = 'block'\r\n        }\r\n    }\r\n\r\n    private hideProgressBar(): void {\r\n        this._showLoadingIndicator = false;\r\n        let lodiningIndecator = document.getElementById(this._loadingIndicatorElementName) as HTMLDivElement;\r\n        if (lodiningIndecator !== null) {\r\n            lodiningIndecator.style.display = 'none';\r\n        }\r\n        clearTimeout(this._loadingIndicatortimeOutRef);\r\n    }\r\n\r\n    private getLoadingIndicator(): HTMLDivElement {\r\n        let lodiningIndecator = document.getElementById(this._loadingIndicatorElementName) as HTMLDivElement;\r\n        if (lodiningIndecator === null) {\r\n            let childerns = document.body.children;\r\n            let lodiningIndecatorExists: boolean = false;\r\n            for (let i = 0; i < childerns.length; i++) {\r\n                if (childerns[i].id === this._loadingIndicatorElementName) {\r\n                    lodiningIndecatorExists = true;\r\n                    break;\r\n                }\r\n            }\r\n            if (!lodiningIndecatorExists) {\r\n                let divItem = document.createElement(\"div\");\r\n                divItem.id = this._loadingIndicatorElementName;\r\n                document.body.insertBefore(divItem, document.body.firstChild);\r\n                lodiningIndecator = document.getElementById(this._loadingIndicatorElementName) as HTMLDivElement;\r\n            }\r\n        }\r\n        return lodiningIndecator;\r\n    }\r\n\r\n}\r\n","var onDocReady = (callback) => {\r\n    if (document.readyState == \"loading\") {\r\n        // loading yet, wait for the event\r\n        document.addEventListener('DOMContentLoaded', callback);\r\n    }\r\n    else {\r\n        callback();\r\n    }\r\n}\r\n\r\nexport class UiHelper {\r\n\r\n    public async getHeaderMessageElement(parent: any): Promise<HTMLDivElement> {\r\n        let alertDiv = parent.getElementById('HeaderAlertMessage') as HTMLDivElement;\r\n        if (alertDiv === null) {\r\n            let childerns = parent.children;\r\n            let alertDivExists: boolean = false;\r\n            for (let i = 0; i < childerns.length; i++) {\r\n                if (childerns[i].id === 'HeaderAlertMessage') {\r\n                    alertDivExists = true;\r\n                    break;\r\n                }\r\n            }\r\n            if (!alertDivExists) {\r\n                let divItem = document.createElement(\"div\");\r\n                divItem.id = 'HeaderAlertMessage';\r\n                document.insertBefore(divItem, document.firstChild);\r\n                alertDiv = parent.getElementById('HeaderAlertMessage') as HTMLDivElement;\r\n            }\r\n        }\r\n        return alertDiv;\r\n    }\r\n\r\n   public GetDateString(date: string): string {\r\n        let monthNames = [\"Jan\", \"Feb\", \"Mar\", \"Apr\",\r\n            \"May\", \"Jun\", \"Jul\", \"Aug\",\r\n            \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\r\n        let dateObj = new Date(date);\r\n        let day = dateObj.getDate();\r\n\r\n        let monthIndex = dateObj.getMonth();\r\n        let monthName = monthNames[monthIndex];\r\n\r\n        let year = dateObj.getFullYear();\r\n\r\n        return `${day}-${monthName}-${year}`;\r\n    }\r\n}\r\nexport { onDocReady }\r\n\r\n"],"sourceRoot":""}